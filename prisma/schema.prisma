// This is your modified Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mysql"
  url       = env("MYSQL_PRISMA_URL") // uses connection pooling
  directUrl = env("MYSQL_URL_NON_POOLING") // uses a direct connection
}

model user {
  id              String    @id @default(uuid()) @db.VarChar(255)
  firstName       String    @db.VarChar(255)
  lastName        String    @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  phoneNumber     String?   @db.VarChar(255)
  address         String?   @db.VarChar(255)
  taxPin          String?   @db.VarChar(255)
  password        String    @db.VarChar(255)
  emailVerifiedAt DateTime? @map("email_verified_at")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  role            role      @relation(fields: [roleId], references: [id])
  roleId          String    @map("role_id") @db.VarChar(255)
  tasks           task[]
  projects        project[] @relation("ProjectMembers")
  refreshTokens   RefreshToken[]  // Add this line for the relation

  @@index([firstName, lastName, email])
  @@map("users")
}

model role {
  id          String   @id @default(uuid()) @db.VarChar(255)
  name        String   @db.VarChar(255)
  permissions Json     // JSON array of permission names
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  users       user[]

  @@map("roles")
}

model permission {
  id        String   @id @default(uuid()) @db.VarChar(255)
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("permissions")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String   
  user      user     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model customer {
  id          String   @id @default(uuid()) @db.VarChar(255)
  firstName   String   @db.VarChar(255)
  lastName    String   @db.VarChar(255)
  email       String   @unique @db.VarChar(255)
  phoneNumber String   @db.VarChar(255)
  address     String?  @db.VarChar(255)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([firstName, lastName, email])
  @@map("customers")
}

model lead {
  id          String   @id @default(uuid()) @db.VarChar(255)
  firstName   String   @db.VarChar(255)
  lastName    String   @db.VarChar(255)
  email       String   @unique @db.VarChar(255)
  phoneNumber String   @db.VarChar(255)
  address     String?  @db.VarChar(255)
  source      String?  @db.VarChar(255)
  status      String   @default("new") @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([firstName, lastName, email])
  @@map("leads")
}

model project {
  id          String   @id @default(uuid()) @db.VarChar(255)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  status      String   @default("planning") @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  tasks       task[]
  members     user[]   @relation("ProjectMembers")

  @@map("projects")
}

model task {
  id          String   @id @default(uuid()) @db.VarChar(255)
  title       String   @db.VarChar(255)
  description String?  @db.Text
  status      String   @default("pending") @db.VarChar(255)
  dueDate     DateTime?
  user        user     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id") @db.VarChar(255)
  project     project  @relation(fields: [projectId], references: [id])
  projectId   String   @map("project_id") @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("tasks")
}